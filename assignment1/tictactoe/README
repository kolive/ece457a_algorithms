create_game_tree(board)
=======================

The above function takes a starting game state and generates a game tree for analysis in order to determine the optimal next move the AI should take.

It returns three arrays

The first is "game_tree" which stores the following arrays each as a row:
  node_scores - where node_scores(i) = the evaluated score of node i
  node_parents - where node_parents(i) = the parent of node i
  node_levels - where node_levels(i) = the depth of node i
  is_node_leaf - where is_node_leaf(i) = 1 if the node is a leaf, 0 else

The second one is "nodes" where nodes(i,:) describes the board for that node

There is also a "moves" array which describes where the piece must be placed in order to get to node i.

minimax(game_tree)
=================

takes in the game_tree and performs the minimax algorithm and returns the new scoring tree with the minimax weighting


get_tile_from_score(optimal_score, moves)
=========================================

takes in the minimax weighted scoring tree and moves to return the tile that should be played for the best move
